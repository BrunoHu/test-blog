{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/基于scrapy的爬虫的快速上手教程-以内推网为例/","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"05c54726-18d6-59c4-80d7-fb6d98efc05f","excerpt":"本篇文章是一篇快速构造爬虫的教程。目的是尽量在最短的时间内构建一个能满足大部分需求的爬虫。目标人群是想通过爬虫自动一些网站上的信息以助于完成工作但是并不想深入了解爬虫的朋友。而且如果能快速的通过自己学到的东西作出成果，我相信大家会对学习保持充足的热情与兴趣。\n本文的爬虫可以去我的github的neitui_spider…","html":"<p>本篇文章是一篇快速构造爬虫的教程。目的是尽量在最短的时间内构建一个能满足大部分需求的爬虫。目标人群是想通过爬虫自动一些网站上的信息以助于完成工作但是并不想深入了解爬虫的朋友。而且如果能快速的通过自己学到的东西作出成果，我相信大家会对学习保持充足的热情与兴趣。\n本文的爬虫可以去我的github的<a href=\"https://github.com/Arnold-Hu/neitui_spider\">neitui_spider</a>项目上看。</p>\n<h1>为什么要写这个教程</h1>\n<p>现在大数据这么时髦对吧，我们也应该赶一下潮流啊，说出去也很有范对不对，别人分分钟以为你是一个Data Scientist，倍儿有面子。但是,问题来了，搞这个大数据从哪里下手呢？</p>\n<ul>\n<li>先弄到数据，用人工，用爬虫，问朋友，派间谍，随意。</li>\n<li>\n<p>整理数据或者说清洗数据</p>\n<blockquote>\n<p>Data is dirty</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    ----   by all data scientist</code></pre></div>\n</blockquote>\n</li>\n<li>把数据存入数据库</li>\n<li>分析数据 得出结论</li>\n<li>可视化</li>\n</ul>\n<p>上面是我草率的步骤分类，每一个方面都有很多值得研究。\n你看，最上游的就是得到数据，而得到数据里面最有意思的就是用爬虫了~这样写爬虫的时候顿时就有一种当产业大佬的感觉，会大大加快你的码代码效率的～</p>\n<h1>安装scrapy</h1>\n<p>这是<a href=\"http://scrapy-chs.readthedocs.org/zh_CN/1.0/intro/install.html\">scrapy的中文安装文档</a>，按照文档上的方法装一般是能够装好的。\n然后还需要<a href=\"http://ipython.org/install.html\">安装ipython</a>来方便进行调试。\n因为我的ubuntu系统已经安装过了python的环境所以只需要\n<code class=\"language-text\">$ sudo easy_install pip</code>\n<code class=\"language-text\">$ pip install scrapy</code>\n<code class=\"language-text\">$ pip install ipython</code>\n就行了。其他的系统把pip安装好可以一样很方便的安装。</p>\n<h1>clone项目</h1>\n<p>如果你还没有安装git并且注册github的话，请先<a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000\">安装git</a>并且<a href=\"github.com\">注册github</a>\n然后你之需要把我的项目clone一下就可以了\n<code class=\"language-text\">$ git clone https://github.com/Arnold-Hu/neitui_spider.git</code>\n这就会在目录下生成一个<a href=\"www.neitui.me\">内推网</a>的爬虫项目，然后我再通过这个项目介绍一些写爬虫最关键的部分。</p>\n<h1>爬虫的配置</h1>\n<h2>item.py文件</h2>\n<p>item.py文件的位置在neitui_spider/neituiwang/neituiwang/item.py的位置。\nitem.py文件的主要作用就是告诉scrapy框架你要爬的内容。\n比如在我的item.py中，部分内容是这样的。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import scrapy\n\nclass NeituiwangItem(scrapy.Item):\n    page_id = scrapy.Field()\n    person = scrapy.Field()\n    date = scrapy.Field()\n    work = scrapy.Field()\n    salary = scrapy.Field()\n    experience = scrapy.Field()\n    company = scrapy.Field()\n    address = scrapy.Field()\n    tag = scrapy.Field()\n    # requirement = scrapy.Field()\n    name = scrapy.Field()\n    company_link = scrapy.Field()\n    city = scrapy.Field()\n    homepage = scrapy.Field()\n    company_size = scrapy.Field()\n    company_field = scrapy.Field()\n    company_finance = scrapy.Field()\n    company_hope = scrapy.Field()</code></pre></div>\n<p>我在内推网中想要爬的就是页面id、发布人、发布时间、招聘职位、薪水等内容。其中requirement被我注释掉了，因为职位需求内容比较多，得到的数据不好分析，需要的话可以去掉注释。\n你如果有什么想爬的内容，都需要先在item.py文件中”备案“。格式是\n<code class=\"language-text\">content = scrapy.Field()</code></p>\n<h2>锁定目标网页</h2>\n<p>除了item.py之外剩下的配置都在neitui_spider/neituiwang/neituiwang/spiders/neituiwangspider.py中。\n我们来看锁定目标网页的部分</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">name = &quot;neituiwang&quot;\n    allowed_domains = [&quot;neitui.me&quot;]\n    start_urls = [&quot;http://www.neitui.me/neitui/type=all.html&quot;]\n\n    rules = [\n        Rule(LinkExtractor(allow=(&#39;\\?name=job&amp;handle=detail&amp;id=\\d{6}&amp;from=index&#39;)), follow=False, callback=&#39;parse_item&#39;),\n        Rule(LinkExtractor(allow=(&#39;/neitui/type=all&amp;page=\\d+\\.html&#39;,)), follow=True)\n    ]</code></pre></div>\n<ul>\n<li><strong>name</strong>是你的爬虫的名字，启动爬虫的时候输入的就是这个。</li>\n<li>\n<p><strong>allowed_domains</strong>是限定的域名，让你的爬虫只能在这个域名中工作，比如这个爬虫就只能在内推网中工作，如果爬取到了指向其他网页比如招聘公司的主页则不会跟进。</p>\n<blockquote>\n<p>注意，限制域名中不要在前面加www之类的二级域名前缀。</p>\n</blockquote>\n</li>\n<li><strong>start_urls</strong>则是你的爬虫开始的网页，怎么方便怎么来，前提是要在allowed<em>domain中。比如在内推网中，可以在最新职位那个页面比较方便的解析得到所有的招聘职位信息，那么我就用这个网址。\n如果你要找的网址比较分散，可以加入多个start</em>url，比如\n<code class=\"language-text\">start_url = [&quot;www.baidu.com&quot;, &quot;www.google.com&quot;, &quot;migdal-bavel.in&quot;]</code>\n其实在allowed_domain中同样，加入多个限制域名后只要满足其中一个都进行跟进解析。</li>\n<li><strong>rules</strong>告诉框架如何选择那些网址需要跟进，哪些网址需要解析，具体的见<a href=\"http://scrapy-chs.readthedocs.org/zh_CN/1.0/topics/spiders.html#crawling-rules\">官方文档</a>。\nscrapy会把所在的页面的所有链接都识别出来然后再根据这些rules进行操作。\n最常用rules的就是上面两种</li>\n<li>\n<p>rule1 ——<code class=\"language-text\">Rule(LinkExtractor(allow=(&#39;\\?name=job&amp;handle=detail&amp;id=\\d{6}&amp;from=index&#39;;)), follow=False, callback=&#39;parse_item&#39;)</code>\n负责解析页面，其中</p>\n<ul>\n<li><code class=\"language-text\">LinkExtractor(allow=(&#39;\\?name=job&amp;handle=detail&amp;id=\\d{6}&amp;from=index))</code>表示把满足allow中的正则表达式的网页提取出来。这个正则表达式中<code class=\"language-text\">\\d{6}</code>表示匹配任意6个数字，其他则是原本的意思，比如这个表达式会匹配网址为<code class=\"language-text\">http://www.neitui.me/?name=job&amp;handle=detail&amp;id=404937&amp;from=index</code>这样的页面。</li>\n<li><code class=\"language-text\">follow = false</code> 表示对提取出来的网页不跟进，也就是不再对提取出来的网页中的链接通过rules进行处理，换句话说，爬虫在这里到头了。</li>\n<li><code class=\"language-text\">callback = &#39;parse_item&#39;</code> 表示把解析出来的网页传回给 parse_item 函数进行处理，也就是要在这个页面提取我们要的信息。</li>\n</ul>\n</li>\n<li>\n<p>rule2 ——<code class=\"language-text\">Rule(LinkExtractor(allow=(&#39;/neitui/type=all&amp;page=\\d+\\.html&#39;,)), follow=True)</code>\n负责跟进页面，其中</p>\n<ul>\n<li><code class=\"language-text\">LinkExtractor(allow=(&#39;/neitui/type=all&amp;page=\\d+.html&#39;,))</code>  和上面那个一样，同样是正则表达式来过滤链接。其中<code class=\"language-text\">\\d+</code>指的是贪心匹配至少一个数字，<code class=\"language-text\">\\.</code>表示匹配’.’。例子：<code class=\"language-text\">http://www.neitui.me/neitui/type=all&amp;page=1.html</code>。</li>\n<li><code class=\"language-text\">follow=True</code> 表示会过滤提取出来的网页中的所有链接再次通过rules解析，换句话说，爬虫还会继续往下走。\n而这里因为没有我们需要的信息，所以我们没有用callback参数，如果你需要在这个页面中提取一些信息的话，可以再加上这个。比如如果你在下面还有一个解析页面的parse<em>page函数的话，可以再加上`callback = ‘parse</em>page’`。</li>\n</ul>\n</li>\n</ul>\n<h2>提取信息</h2>\n<p>我们来看看提取信息的部分</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def parse_item(self, response):\n        base = response.xpath(&#39;//div[@class=&quot;cont&quot;]&#39;)\n        company_part = response.xpath(&#39;//div[@class=&quot;plate company_information&quot;]&#39;)\n        item = NeituiwangItem()\n        item[&#39;page_id&#39;] = response.xpath(&#39;//div[@class=&quot;handlerbar clearfix&quot;]/a[1]/@href&#39;).re(&#39;\\d{6}&#39;)\n        item[&#39;person&#39;] = base.xpath(&#39;div[1]/a[1]/text()&#39;).extract()  \n        item[&#39;date&#39;] = base.xpath(&#39;div[1]/text()&#39;).re(&#39;\\d{2}.\\d{2}.&#39;)\n        item[&#39;work&#39;] = base.xpath(&#39;div[2]/strong/text()&#39;).extract()\n        item[&#39;salary&#39;] = base.xpath(&#39;div[2]/span[1]/text()&#39;).extract()\n        item[&#39;experience&#39;] = base.xpath(&#39;div[2]/span[2]/text()&#39;).extract()\n        item[&#39;company&#39;] = base.xpath(&#39;div[3]/span[1]/text()&#39;).extract()\n        item[&#39;address&#39;] = base.xpath(&#39;div[3]/span[2]/text()&#39;).extract()\n        item[&#39;tag&#39;] = base.xpath(&#39;div[4]//ul/li/span[1]/text()&#39;).extract()\n        # item[&#39;requirement&#39;] = base.xpath(&#39;div[6]/text()&#39;).extract()\n        item[&#39;name&#39;] = company_part.xpath(&#39;div[1]/div[2]/a/text()&#39;).extract()\n        item[&#39;company_link&#39;] = &quot;www.neitui.me&quot; + company_part.xpath(&#39;div[1]/div[2]/a/@href&#39;).extract()[0]\n        item[&#39;city&#39;] = company_part.xpath(&#39;dl[1]/dd[1]/text()&#39;).extract()\n        item[&#39;homepage&#39;] = company_part.xpath(&#39;dl[1]/dd[2]/a/@href&#39;).extract()\n        item[&#39;company_size&#39;] = company_part.xpath(&#39;dl[2]/dd[1]/text()&#39;).extract()    \n        item[&#39;company_field&#39;] = company_part.xpath(&#39;dl[2]/dd[2]/text()&#39;).extract()\n        item[&#39;company_finance&#39;] = company_part.xpath(&#39;dl[2]/dd[3]/text()&#39;).extract()\n        item[&#39;company_hope&#39;] = company_part.xpath(&#39;dl[3]/dd/text()&#39;).extract()\n        yield item</code></pre></div>\n<p>在这里，我们就需要把一个个在item.py那里挖的坑填进去了。\n因为我们之需要对一种页面进行解析，所以我们只写了一种解析函数．在解析函数中，我们通过<strong>选择器</strong>来提取我们需要的信息，而使用选择器最关键的就是要会用Xpath和正则表达式．\n简而言之，Xpath是通过html中的标签进行对信息的过滤。<strong>这个一定要自己学会才能熟练的使用爬虫</strong>。\n<a href=\"http://www.w3school.com.cn/xpath/\">Xpath教程</a>\n<a href=\"http://scrapy-chs.readthedocs.org/zh_CN/1.0/intro/tutorial.html#id5\">简介scrapy中的提取方法</a>\n<a href=\"http://scrapy-chs.readthedocs.org/zh_CN/1.0/topics/selectors.html\">选择器的正式文档</a>\n光是看这个教程肯定很枯燥，但是因为我们已经安装过了ipython，所以我们可以交互式的来验证我们所学的内容，我们需要打开scrapy shell\n<code class=\"language-text\">scrapy shell url</code>\n其中url是你需要解析的网站，比如我们想解析内推网第一页的招聘信息只需要\n<code class=\"language-text\">scrapy shell &quot;http://www.neitui.me/neitui/type=all&amp;page=1.html&quot;</code></p>\n<blockquote>\n<p>注意！url要加引号，不然url中的一些符号会错误解析。</p>\n</blockquote>\n<p>然后我们就可以愉快的玩耍了，我相信平时使用Matlab和R的同学会很喜欢这种界面的。\n举一个例子</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">base = response.xpath(&#39;//div[@class=&quot;cont&quot;]&#39;)\nitem[&#39;person&#39;] = base.xpath(&#39;div[1]/a[1]/text()&#39;).extract()\nitem[&#39;date&#39;] = base.xpath(&#39;div[1]/text()&#39;).re(&#39;\\d{2}.\\d{2}.&#39;)</code></pre></div>\n<p>base是作为一个通用的路径表示所有属性class=”cont”的div标签中的内容\nitem[‘person’] 表示在base路径下第一个div标签中的第一个a标签中的文本内容(若text()改为@href则表示是a中的href链接)\nitem[‘date’] 表示在base路径下地一个div标签中的文本内容中符合正则表达式的部分(\\d{2}表示匹配两个数字，.表示匹配任意一个字符，和起来是为了匹配如同08月03日这种内容)</p>\n<p>至此，爬虫就搭建完了。</p>\n<h2>运行爬虫</h2>\n<p>然后输入\n<code class=\"language-text\">scrapy crawl spidername -o filename.csv</code>\n必须在爬虫的目录里(neitui_spider/neituiwang/)运行这个命令，建议在爬虫的根目录中运行。</p>\n<ul>\n<li>spidername是你爬虫的名字，在这里是neituiwang</li>\n<li>filename是你要存放数据的文件的名字，存放数据可以有几种文件格式，比如csv，json。按照我们的目标人群，建议用csv，方便excel处理。</li>\n</ul>\n<h2>等爬虫</h2>\n<p>爬虫是需要时间爬的，我运行的时候差不多用了一个小时，爬出来了30000+条记录。可以直接在<a href=\"https://github.com/Arnold-Hu/neitui_spider/blob/master/neituiwang/data.csv\">这里</a>查看我爬出来的记录，因为过了一段时间，可能和最新的有所不同。</p>\n<h2>总结</h2>\n<p>爬虫的工作方法就是从一个网页开始，根据特定的规则通过一个个链接探索网页，然后提取出每个页面中我们需要的信息。\n那么，从这个思路我，我们回顾一下我们要配置的那些基本内容。</p>\n<ul>\n<li><strong>从一个网页开始</strong>\n我们提供start<em>urls来提供初始页面，通过allowed</em>domain给出整张网的大小。</li>\n<li><strong>根据特定的规则探索</strong>\n我们在rules里面配置规则告诉爬虫应该怎么探索网络。</li>\n<li><strong>提取页面</strong>\n我们通过选择器配合Xpath来告诉爬虫应该提取那些信息。</li>\n<li><strong>我们需要的信息</strong>\n我们通过item.py里的项目告诉爬虫这些信息是什么或者说该填入那个坑里面。</li>\n</ul>\n<h1>大功告成</h1>","frontmatter":{"title":"基于scrapy的爬虫的快速上手教程----以内推网为例","date":"August 22, 2015","description":null,"tags":["python","scrapy","教程","数据","爬虫"]}}},"pageContext":{"slug":"/基于scrapy的爬虫的快速上手教程-以内推网为例/","previous":{"fields":{"slug":"/利用github-page以及hexo模板建立个人独立博客/"},"frontmatter":{"title":"利用github page以及hexo模板建立个人独立博客"}},"next":{"fields":{"slug":"/一定要养成备份文件的好习惯，防止手贱/"},"frontmatter":{"title":"一定要养成备份文件的好习惯，防止手贱"}}}}}