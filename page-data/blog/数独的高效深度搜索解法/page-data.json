{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/数独的高效深度搜索解法/","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"Bates Hu"}},"markdownRemark":{"id":"5c147abc-ebb3-5e61-a32e-445f79449934","excerpt":"前言 原来一直有段时间我很喜欢玩数独，尤其是沉迷于如何不用试错法来搞定一个复杂的数度问题，但是我总是被教做人。现在哥会编程了，可以用计算机教数独做人了，想想就很开心呢。 这篇文章是在看了Peter Norvig…","html":"<h2>前言</h2>\n<p>原来一直有段时间我很喜欢玩数独，尤其是沉迷于如何不用试错法来搞定一个复杂的数度问题，但是我总是被教做人。现在哥会编程了，可以用计算机教数独做人了，想想就很开心呢。</p>\n<p>这篇文章是在看了Peter Norvig的一篇相关的文章后着手写的，这篇文章写的非常好，原文在<a href=\"http://norvig.com/sudoku.html\">这里</a>，翻译的版本在<a href=\"http://python.jobbole.com/81621/\">这里</a>.本文参考了其部分实现.</p>\n<p>而本文的代码在我的<a href=\"https://github.com/Arnold-Hu/garage/blob/master/soduku/sudo.py\">github/garage</a>中.可以直接通过<code class=\"language-text\">git clone https://github.com/Arnold-Hu/garage.git</code>,然后再<code class=\"language-text\">python /garage/sudo.py</code>试试看.</p>\n<h2>思路</h2>\n<p>数独的规则感觉大多数人都明白,就是横竖及小方格不能有重复的数字.那么,我们很容易就能得到一个非常显而易见的解题方法.</p>\n<blockquote>\n<p>当有一个数字确定时,那么与这个数字同横行,竖行以及同小方块的所有元素就不可能为那个数字.</p>\n</blockquote>\n<p>那么很容易能想到我们应该设计一个能体现把这些可能性表示出来的数据结构.</p>\n<p>然后,通过经验我们能知道,完全靠这个规则是不能一次性解决数度问题的,对于一些较难的数独问题我们必然要试错,也就是一种深度搜索.</p>\n<p>慢慢的,我们的方法就浮出了水面,每一次我们先通过已知的确定数字,把其他位置的数字试图’逼’出来.如果还有不确定数字,那么我们就开始搜索一步,也就是常说了试错一步,然后再’逼’一次,这样有三种情况:</p>\n<ol>\n<li>找到答案,游戏结束.</li>\n<li>发现出现错误,那么表示尝试的那个数字错了,再换一个可能的数字继续’逼’.</li>\n<li>还没错,但是还是得不到结果.那么我们就要再往下搜索一步.</li>\n</ol>\n<h2>数据结构</h2>\n<p>首先,人生苦短,我用python.</p>\n<p>然后,很容易能想到,我们可能会进行大量的测试来估计我们解法的速度,所以我们的解法应尽量快,而且显而易见的不用在乎空间的消耗.</p>\n<p>所以我们的结构必须能尽量保存每次计算的结果,减少不必要的时间.我们可以做一个字典,给没一个小方格都匹配一个列表用于储存他的所有可能的取值.而且每个小方格的都独立,操作性强,而且因为是hash表的关系,读取速度非常快.</p>\n<p>再者,因为空间不限,我们可以建立一个辅助数组,专门存储已经确定数字的小方格,来节省搜索以及计算列表长度的时间.</p>\n<h2>coding</h2>\n<h3>准备工作</h3>\n<p>我们先搭起一个数独的结构,因为这部分只用一次,就可以在解不同的数独中重复使用,所以不用关心写的多复杂.</p>\n<p>这部分的关键部分有两个:</p>\n<ol>\n<li>建立起数独的主体结构.</li>\n<li>\n<p>建立辅助字典来得到每个小方格所对抗的方格(也就是如果这个小方格已经确定了一个数字,那么其对抗小方格则不可能出现对应数字)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">path <span class=\"token operator\">=</span> <span class=\"token string\">'/home/arnold-hu/garage/soduku/very_hard.txt'</span> <span class=\"token comment\">#文件夹有好几个备用数独用于测试,路径需更改</span>\n<span class=\"token comment\">#   initiate the structure of sudoku</span>\nrows <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'4'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'5'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'6'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'7'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'8'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'9'</span><span class=\"token punctuation\">)</span>\ncols <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'g'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">)</span>\ntypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'row'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'col'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'block'</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ol>\n<p>units<em>belongs = {} #过渡字典,用于表示每个小方块所属的组.\ncontrol</em>units = {} #过渡字典,用于表示每个组有哪些小方块.</p>\n<p>grids = [x+y for x in cols for y in rows]  #所有小方块的名字</p>\n<h1>建立起unit_belongs字典</h1>\n<p>for i in grids:\n# init\nunits_belongs[i] = []\np = grids.index(i)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># determine the row\nr = p//9\nname = &#39;row&#39; + str(r+1)\nunits_belongs[i].append(name)\n\n# determine the col\nc = p % 9\nname = &#39;col&#39; + str(c+1)\nunits_belongs[i].append(name)\n\n#  determine the block\nb = r//3*3 + c//3\nname = &#39;block&#39; + str(b+1)\nunits_belongs[i].append(name)</code></pre></div>\n<h1>建立起control_parts字典</h1>\n<p>control<em>parts</em>names = [x+y for x in types for y in rows]  #控制组的名字列表</p>\n<p>for i in control<em>parts</em>names:\ncontrol_units[i] = []</p>\n<p>for i in units<em>belongs:\nfor j in units</em>belongs[i]:\ncontrol_units[j].append(i)</p>\n<h1>关键过程,通过control<em>parts和unit</em>belongs来建立对抗方格字典</h1>\n<p>conter_units = {}</p>\n<p>for i in grids:\nconter<em>units[i] = []\nfor j in units</em>belongs[i]:\nconter<em>units[i].extend(control</em>units[j])\nconter<em>units[i] = set(conter</em>units[i])\nconter_units[i].remove(i)</p>\n<h1>数独的静态部分结束</h1>\n<h1>建立数独的主体部分</h1>\n<p>units = {} #数独主体字典</p>\n<p>result_units ={} #这是一个global变量,作用在后面会注明.</p>\n<p>for i in grids:\nunits[i] = [‘1’, ‘2’, ‘3’, ‘4’, ‘5’, ‘6’, ‘7’, ‘8’, ‘9’]</p>\n<p>invalid = [] #用来保存所有确定的位置的列表</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">结构部分的准备就是这些,为了开心愉快的使用和调试,还需要一些准备函数:\n\n用于从文件中得到数据,初始化数独结构的函数:</code></pre></div>\n<p>def init<em>sudo</em>with_file(units, path): #这个函数读取文件中前81个非换行符和空格的内容,若内容为1-9,则相应位置为数字,否则为空白\nwith open(path, ‘r’) as f:\ndata = f.read()\ncount = 0\nfor i in data:\nif i in rows:\nunits[grids[count]] = [i]\ninvalid.append(grids[count])\ncount += 1\nelif i != ‘\\n’ and i != ’ ’:\ncount += 1\nif count >= 81:\nbreak</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">用于显示数独的函数:</code></pre></div>\n<p>def display_sudo(units):\nfor index,i in enumerate(grids, start=1):\nif len(units[i]) == 9:\nprint ’*‘.center(6), #6是一个魔法数字,虽然这样不好,但是为了省事还是直接用了,大多数情况下显示效果不错.\nelse:\nprint ”.join(units[i]).center(6),\nif index % 9 == 0:\nprint ‘\\n’</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">### 算法部分\n\n首先,通过已经知道的数字把对抗方格的相应可能性消除,如果得到新的确定数字,则再消除:</code></pre></div>\n<p>def simple<em>vanish(units, invalid):\nflag = True\nwhile flag:\nflag = False\nfor i in grids:\nif i not in invalid:\nfor j in conter</em>units[i]:\nif j in invalid:\nif units[j][0] in units[i]:\nunits[i].remove(units[j][0])\nflag = True #当有一个可能性被消除,那么这一个循环就有收获,那么则要继续循环\nif len(units[i]) == 1:\ninvalid.append(i)\nbreak</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">深度搜索部分,按照前文试错法的三种可能性,来递归实现:</code></pre></div>\n<p>def deep<em>vanish(units, invalid):\nglobal result</em>units\ninvalid<em>copy = invalid[:]\nunits</em>copy = copy.deepcopy(units)\ntag = get<em>shortest</em>ava<em>unit(units</em>copy, invalid<em>copy) #得到一个待定元素最少的位置\ninvalid</em>copy.append(tag) #因为在递归过程中因为simple<em>vanish是直接作用的,所以会破坏原来的结构,需要先复制一份.\ntags = units</em>copy[tag][:]\nfor ava in tags:\nunits<em>copy[tag] = [ava]\nsimple</em>vanish(units<em>copy, invalid</em>copy)\nif not check(units<em>copy, invalid</em>copy): # 有错误那么则试探下一个值\nunits<em>copy = copy.copy(units)       # 下面三个语句用于回溯还原现场\ninvalid</em>copy = invalid[:]\ninvalid<em>copy.append(tag)\ncontinue\nelse:                                   # 没有错误\n# 没有错误的情况下,如果完成,那么直接给全局变量result</em>units正确的答案,然后再返回True\nif len(invalid<em>copy) == 81:\nresult</em>units = units<em>copy\nreturn True\nelse:                               #如果没有结果,则进入下一层\nresult = deep</em>vanish(units<em>copy, invalid</em>copy)\nif result:\nreturn True\nelse:\n#收到False则表示下一层没有正确结果,则表示这个试探值是错的,换一个.\nunits<em>copy = copy.copy(units)\ninvalid</em>copy = invalid[:]\ninvalid_copy.append(tag)\ncontinue\nreturn False\n# 所有的可能取值均不对,则此路不同,返回False通知上一层换个值试探.若为最开始层,则表示题目本身错误.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">**深度搜索的部分辅助函数**\n\n得到所有不确定位置中待定元素最少的位置:</code></pre></div>\n<p>def get<em>shortest</em>ava<em>unit(units, invalid):\ncount = 100\nfor i in grids:\nif i not in invalid and len(units[i]) &#x3C; count:\ncount = len(units[i])\nshort</em>u = i\nreturn short_u</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">检验数独是否违反规则出现错误:</code></pre></div>\n<p>def check(units, invalid):\nfor i in invalid:\nfor j in conter_units[i]:\nif j in invalid:\nif units[i][0] == units[j][0]:\nreturn False\nreturn True</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">### 打包整合</code></pre></div>\n<p>def solve(units, invalid):\nsimple<em>vanish(units, invalid)\nif len(invalid) == 81:\nresult</em>units = units\nelse:\nreturn deep_vanish(units, invalid)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">### 测试</code></pre></div>\n<p>if <strong>name</strong> == ”<strong>main</strong>”:\ninit<em>sudo</em>with<em>file(units)\nprint ’<em>’</em>20 + ‘原始数独’ + ’<em>’</em>20\ndisplay</em>sudo(units)\nprint ’<em>’</em>20 + ‘解答’ + ’<em>’</em>20\nif solve(units, invalid):\ndisplay<em>sudo(result</em>units)\nelse:\nprint ‘这个数独无解’</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">**至此,算法完成.**\n\n\n## to do\n* 测试算法速度\n* 生成朝鸡难的数独\n* 优化算法</code></pre></div>","frontmatter":{"title":"数独的高效深度搜索解法","date":"February 14, 2016","description":null,"tags":["math","算法","python","数独"]}}},"pageContext":{"slug":"/数独的高效深度搜索解法/","previous":{"fields":{"slug":"/python和数据库的接口简介/"},"frontmatter":{"title":"python和数据库的接口简介"}},"next":{"fields":{"slug":"/leetcode记/"},"frontmatter":{"title":"leetcode记（持续更新中）"}}}}}